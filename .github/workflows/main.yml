
name: main
on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request: {}
# TODO the glbinding build
jobs:
  build-supertux:

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        build_type: [Debug, Release]
        exclude:
          - os: macos-latest
            compiler: gcc
        include:
          - os: ubuntu-latest
            build_type: Release
            compiler: gcc
            release: 'ON'
          - os: macos-latest
            build_type: Release
            release: 'ON'
          - os: windows-latest
            build_type: Debug  
            compiler: msvc
          - os: windows-latest
            build_type: Release  
            compiler: msvc
            release: 'ON'

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          # Fetch the whole tree so git describe works
          fetch-depth: 0
          submodules: true

      - name: Install linux dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update 
          sudo apt install -y cmake build-essential automake clang-6.0 g++-8 libc++-dev libogg-dev \
                libvorbis-dev libopenal-dev libboost-all-dev libsdl2-dev libsdl2-image-dev \
                libfreetype6-dev libharfbuzz-dev libfribidi-dev libglib2.0-dev gtk-doc-tools \
                rpm sshpass libraqm-dev libglew-dev libcurl4-openssl-dev

      - name: Install macos dependencies
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install cmake bash libogg libvorbis glew openal-soft sdl2 sdl2_image sdl2_ttf \
                freetype harfbuzz fribidi glib gtk-doc glbinding libraqm
          # Something funky happens with freetype if mono is left
          sudo mv /Library/Frameworks/Mono.framework /Library/Frameworks/Mono.framework-disabled

      - name: Install windows dependencies
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          vcpkg integrate install
          vcpkg install boost-date-time:x64-windows
          vcpkg install boost-filesystem:x64-windows
          vcpkg install boost-format:x64-windows
          vcpkg install boost-locale:x64-windows
          vcpkg install boost-optional:x64-windows
          vcpkg install boost-system:x64-windows
          vcpkg install curl:x64-windows
          vcpkg install --recurse freetype:x64-windows
          vcpkg install glew:x64-windows
          vcpkg install libogg:x64-windows
          vcpkg install libraqm:x64-windows
          vcpkg install libvorbis:x64-windows
          vcpkg install openal-soft:x64-windows
          vcpkg install sdl2:x64-windows
          vcpkg install sdl2-image[libjpeg-turbo]:x64-windows

      - name: Set compiler (gcc)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc' }}
        run: |
          echo "CXX=g++-8" >> $GITHUB_ENV
          echo "CC=gcc-8" >> $GITHUB_ENV

      - name: Set compiler (clang)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.compiler == 'clang' }}
        run: |
          echo "CXX=clang++-6.0" >> $GITHUB_ENV
          echo "CC=clang-6.0" >> $GITHUB_ENV

      - name: Set compiler (macos)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          # This ensures for now we use clang11
          # Clang12 runs into a bunch of fun with `include location '/usr/local/include' is unsafe for cross-compilation`
          # that we don't care about for now
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV

      - name: Configure bulid
        if: ${{ matrix.os != 'windows-latest' }}
        env:
          BUILD_TYPE: ${{ matrix.build_type }}
        run: |
          cmake --version
          mkdir "build"
          cd "build"
          # TODO add -DGLBINDING_ENABLED=$USE_GLBINDING
          cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DWARNINGS=ON -DWERROR=ON -DBUILD_TESTS=ON -DCMAKE_INSTALL_MESSAGE=NEVER -DCMAKE_INSTALL_PREFIX=/usr -DINSTALL_SUBDIR_BIN=bin -DINSTALL_SUBDIR_SHARE=share/supertux2

      - name: Configure bulid (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          BUILD_TYPE: ${{ matrix.build_type }}
        run: |
          cmake --version
          mkdir "build"
          cd "build"
          # TODO add -DGLBINDING_ENABLED=$USE_GLBINDING
          cmake -G "Visual Studio 16 2019" -A x64 -DVCPKG_BUILD=ON -DCMAKE_TOOLCHAIN_FILE=c:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=%P% -DHAVE_SDL=true -DPACKAGE_VCREDIST=true %APPVEYOR_BUILD_FOLDER%

      - name: Build and install
        working-directory: build
        run: |
          make -j3 VERBOSE=1
          make install DESTDIR="/tmp/supertux" VERBOSE=1



      - name: Build (windows)
        working-directory: build
        run: cmake --build . --config $BUILD_TYPE

      - name: Run tests
        working-directory: build
        run: ./test_supertux2

      - name: Package
        if: ${{ matrix.os != 'windows-latest' }}
        env:
          OS_NAME: ${{ matrix.os }}
          COMPILER_NAME: ${{ matrix.compiler }}
          BUILD_NAME: ${{ matrix.build_type }}
          PACKAGE: 'ON'
        working-directory: build
        run: ../.ci_scripts/package.sh
        
      - name: Package (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: '"C:\Program Files (x86)\CMake\bin\cpack.exe"'

      # Github actions is dumb and won't let you download single files from artifacts, so break up the artifacts instead
      - uses: actions/upload-artifact@v2
        with:
          name: "${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-appimage"
          path: build/upload/*.AppImage
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v2
        with:
          name: "source"
          path: build/upload/*.tar.gz
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v2
        with:
          name: "${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-dmg"
          path: build/upload/*.dmg
          if-no-files-found: ignore

      - uses: shallwefootball/s3-upload-action@master
        # These all have repository_owner conditions because the secret isn't available to other owners
        if: matrix.release == 'ON' && env.CI_KEY != null
        env:
          CI_KEY: ${{ secrets.CI_DOWNLOAD_ACCESS_KEY_ID }}
        with:
          aws_bucket: supertux-ci-downloads
          aws_key_id: ${{ secrets.CI_DOWNLOAD_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.CI_DOWNLOAD_SECRET_ACCESS_KEY }}
          source_dir: 'build/upload'
          destination_dir: "${{ github.sha }}/gh-actions/${{ matrix.os }}/${{ github.run_id }}"   

      - name: Post uploaded file
        if: matrix.release == 'ON' && env.DOWNLOAD_APIKEY != null
        working-directory: build
        run: ../.ci_scripts/deploy.sh
        env:
          PREFIX: "${{ github.sha }}/gh-actions/${{ matrix.os }}/${{ github.run_id }}"
          DOWNLOAD_APIKEY: ${{ secrets.DOWNLOAD_APIKEY }}

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/') && matrix.release == 'ON' && github.repository_owner == 'supertux'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: 'build/upload/SuperTux-*'
          draft: true
